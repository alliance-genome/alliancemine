#!/bin/bash

# Set error handling
set -e

# Get the latest dump file from AWS S3
export DB_FILE=$(aws s3api list-objects-v2 --bucket "agr-db-backups" --query 'reverse(sort_by(Contents[?contains(Key, `alliancemine/local/`)], &LastModified))[:1].Key' --output=text)
aws s3 cp s3://agr-db-backups/$DB_FILE /root/data/db_backup.dump --no-progress

# Check if the database exists, drop if it does, and create a new one
DB_NAME="alliancemine"
DB_HOST="agr.local.alliancemine.postgres.server"
DB_USER="postgres"

# Drop the database if it exists
psql -U $DB_USER -h $DB_HOST -c "DROP DATABASE IF EXISTS $DB_NAME;"

# Create a new database
psql -U $DB_USER -h $DB_HOST -c "CREATE DATABASE $DB_NAME;"

# Load the database from the dump file
pg_restore -U $DB_USER -O -x -d $DB_NAME -h $DB_HOST -j 4 /root/data/db_backup.dump

# Pull secrets file
aws secretsmanager get-secret-value --region=us-east-1 --secret-id IntermineLocalPropertiesFile --query SecretString --output text > alliancemine.properties

# Copy properties
echo "index.solrurl=http://agr.local.alliancemine.solr.server:8983/solr/alliancemine-search" >> dbmodel/resources/keyword_search.properties
echo "autocomplete.solrurl=http://agr.local.alliancemine.solr.server:8983/solr/alliancemine-autocomplete" >> dbmodel/resources/objectstoresummary.config.properties

# Run load Solr
./build_solr postgres postgres

# Deploy Tomcat
./gradlew cargoRedeployRemote --stacktrace
